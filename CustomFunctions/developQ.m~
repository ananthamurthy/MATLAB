function [Q, ex1, ex2, ex3, ex4] = developQ(params4Q)

Q = zeros(params4Q.nCells, 1);

% ex1 = zeros(params4Q.nCells, 1);
% ex2 = zeros(params4Q.nCells, 1);
% ex3 = zeros(params4Q.nCells, 1);
% ex4 = zeros(params4Q.nCells, 1);

for cell = 1:params4Q.nCells
    
    htp = params4Q.hitTrialPercent(cell);
    a = params4Q.alpha;
    np = params4Q.noisePercent;
    eaf = params4Q.eventAmplificationFactor;
    b = params4Q.beta;
    aew = params4Q.allEventWidths(cell, :);
    g = params4Q.gamma;
    p = params4Q.pad(cell, :);
    sw = params4Q.stimulusWindow;
    
    Q(cell) = (htp/100) * exp(-1 ...
        * (((a * np)/(100 * eaf)) + ((b * std(aew))/mean(aew)) + ((g * std(p))/sw))
);
    
    fprintf('All event widths for cell %i :\n', cell)
    disp(params4Q.allEventWidths(cell, :))
    
    fprintf('Std Dev: %d\n', fp)
    
     ex1(cell) = ((params4Q.noisePercent)/(100*params4Q.eventAmplificationFactor));
     ex2(cell) = std(params4Q.allEventWidths(cell, :))/mean(params4Q.allEventWidths(cell, :));
     ex3(cell) = std(params4Q.pad(cell, :))/params4Q.stimulusWindow;
     ex4(cell) = std(params4Q.allEventWidths(cell, :));
end